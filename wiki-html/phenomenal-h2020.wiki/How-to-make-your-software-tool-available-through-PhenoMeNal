<h1>Quick-start guide for developers</h1>

<p>If you are familiar with docker and other technologies used within our project, you can simply follow the next steps:</p>

<ul>
<li><a href="Dockerfile-Guide">Create a dockerfile</a>, with a repo inside <a href="https://github.com/phnmnl/">phnmnl github organization</a> named <code>container-&lt;your-tool&gt;</code>, for your tool.</li>
<li>Once your docker image builds locally, <a href="Jenkins-Guide">add it as a job in Jenkins</a>. You should have authentication details for this already.</li>
<li>Write a Galaxy tool wrapper. An example and explanation on how to write a wrapper can be found on the <a href="https://wiki.galaxyproject.org/Admin/Tools/AddToolTutorial">Galaxy Wiki</a>.</li>
<li>Test your Galaxy tool wrapper plus container on a <a href="https://github.com/phnmnl/phenomenal-h2020/wiki/galaxy-with-k8s">local deployment of Kubernetes using minikube</a>.</li>
<li>Once everything works on your own local Kubernetes, make a pull request on the <a href="https://github.com/phnmnl/docker-galaxy-k8s-runtime">galaxy-k8s-runner</a> git repo for adding it to the main instance.
<ul>
<li>This PR should include the actual XML galaxy wrapper (including any accompanying files for its operation/documentation), the changes needed on <code>config/job_conf.xml</code> and on <code>config/tool_conf.xml</code>.</li>
</ul></li>
<li>If you also have a Galaxy fancy workflow around your tool(s): 
<ul>
<li>create a workflow test with <a href="https://github.com/phnmnl/wft4galaxy">wft4galaxy</a> and <a href="Jenkins-Guide">add it as a job in Jenkins</a></li>
<li>make a pull request adding the <code>fancyworkflow.ga</code> file to the <a href="https://github.com/phnmnl/container-galaxy-k8s-runtime/tree/develop/workflows">container-galaxy-k8s-runtime workflow</a> directory.</li>
</ul></li>
<li>As we approach release dates, due to changing functionality or other reasons, you will need to make a release of your container. The individual tool/container release process is explained <a href="Tool-container-release-process">here</a>.</li>
</ul>

<h1>How to make your software tool available through PhenoMeNal</h1>

<p>PhenoMeNal is a comprehensive and standardised e-infrastructure that will support the data processing and analysis pipelines for molecular phenotype data generated by metabolomics applications. In order to provide services enabling computation and analysis to improve the understanding of the causes and mechanisms underlying health, healthy ageing and diseases, PhenoMeNal uses existing open source data standards and tools to make them available on local, national and international cloud infrastructures.</p>

<p>PhenoMeNal encourages bioinformaticians and software developers to submit and prepare their applications and tools to be available through our e-infrastructure. The primary place of development and contribution is the <a href="https://github.com/phnmnl">PhenoMeNal Github Repository</a>. Here, we compile most of our technical efforts to be included in the e-infrastructure. We encourage bioinformaticians and software developers and gladly assist with preparing applications to be available through PhenoMeNal.</p>

<p>Within PhenoMeNal software will be packaged into containers. We use a technology called <a href="http://www.docker.com/">docker</a> for packaging applications and all of their dependencies. Docker is available for several platforms including Linux, FreeBSD, Windows and Apple macOS. Installation instructions can be found at <a href="https://www.docker.com/products/docker">Docker</a>. The docker container images can be deployed easily throughout the e-infrastructure and are also available for anybody to be pulled from the <a href="https://container-registry.phenomenal-h2020.eu/">PhenoMeNal Docker Registry</a> (only available through the <code>docker pull</code> command). For example, to obtain our <a href="https://github.com/phnmnl/ipo_docker">Mass IPO container</a> to use locally on a machine with docker installed, you would need to execute:</p>

<p><code>docker pull container-registry.phenomenal-h2020.eu/phnmnl/ipo</code></p>

<p>which would download for you the container.</p>

<p>Further read on docker can be <a href="http://wiki.zenoss.org/download/core/drich_slides/DockerSlides.pdf">obtained here</a>.</p>

<p>Installation of docker is easy. Unexperienced users just need to follow the instructions of the graphical installer supplied by <a href="https://www.docker.com/products/docker">Docker</a>. While recent Linux distributions come with Docker packages, some older Debian-based Linux distributions require manual intervention to properly install Docker. On Ubuntu Trusty (14.05), Docker can be installed with the following commands:</p>

<pre><code>sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
sudo echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" &gt; /etc/apt/sources.list.d/docker.list
sudo apt-get remove docker.io
sudo apt-get update
sudo apt-get install docker-engine
</code></pre>

<p>Please note that the kernel needs some additional starting parameters to run docker containers smoothly:</p>

<pre><code>sudo echo 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"' &gt;&gt; /etc/default/grub
sudo update-grub
</code></pre>

<p>Within PhenoMeNal we also use docker-compose – a docker component that automates the management of docker containers. While with Docker Toolbox it is automatically installed, docker-compose can be installed on any distribution using pip (the python package manager):</p>

<pre><code>sudo apt-get install python-pip
sudo pip install docker-compose
</code></pre>

<h2>Contributing to PhenoMeNal</h2>

<p>PhenoMeNal aims to isolate bioinformatics tools as micro services through the use of <a href="https://www.docker.com/">Docker</a> containers. If you haven't used Docker containers in the past, the official <a href="https://docs.docker.com/engine/userguide/">Docker guide</a> is an excellent starting point.</p>

<p>Building Docker containers requires the use of so called Dockerfiles. They contain a list of commands needed for installing the application with all of its dependencies. One great feature of Docker is that new images can build upon other pre-built Docker images. Thus, usually only a few rules are needed in a Dockerfile to get a given application to build and configure successfully. An example Dockerfile could look like this:</p>

<pre><code>FROM ubuntu:14.04
MAINTAINER Payam Emami, payams@his.email.domain
RUN apt-get update &amp;&amp; apt-get install --yes openms
ENTRYPOINT ["FeatureLinkerLabeled"]
</code></pre>

<p>Dockerfiles are plain-text files that contain simple rules what kind of commands are needed to build a container image. The tag 'FROM' specifies the pre-built container image the Dockerfile is based on. Everything that is written after 'RUN' is treated as a command. Finally, the 'ENTRYPOINT' tag specifies which command is being started when running the container. A very simple Docker container that provides an R-script can be realised with just 4 lines of code. In our demo, we want to run a script called myscript.R that calculates pi in the directory in which the Dockerfile is located in. We are using the official r-base Docker container image, thus avoiding building R ourselves.</p>

<p>Dockerfile:</p>

<pre><code>FROM r-base:latest
ADD myScript.R /usr/local/bin/myScript.R
RUN chmod a+x /usr/local/bin/myScript.R

ENTRYPOINT ["myscript.R"]
</code></pre>

<p>myscript.R:</p>

<pre><code>#!/usr/bin/env Rscript
x &lt;- 0.5
pi &lt;- 2 * (asin(sqrt(1 - x^2)) + abs(asin(x)))
print(pi)
</code></pre>

<p>Please refer the <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a> for instructions on which commands can be used additionally. You can also refer the Dockerfiles in the official <a href="https://github.com/phnmnl">PhenoMeNal github repository</a> which can serve as examples. You may also want to keep an eye on the type of metadata needed to describe the software, to make it citable and discoverable (also outside PhenoMeNal), see <a href="https://codemeta.github.io">codemeta.github.io</a> for further details.</p>

<p>If the R script or Python script is more complex and depends on other files, a better way is to make an R package (doesn’t need to be added to CRAN, but just accessible at a public Git repo) or Python pip installable (doesn’t need to be added to pip, again only accessible at a public Git repo). This is to avoid things like embedded 'source(my<em>other</em>script.R)' calls, which break when the working directory is not the one set by the container (this can be very easily overridden and it is the case in some use cases). A quick alternative workaround for this is to use absolute paths for those sources, so that they don’t depend on the working directory.</p>

<p>After having written the Dockerfile, you just need to build the docker container image:</p>

<pre><code>docker build -t simple .
</code></pre>

<p>After having built the container image successfully, you can run the container:</p>

<pre><code>docker run --name=simple-run -it simple
</code></pre>

<p>Here is another simple example from one of our workshops we did within PhenoMeNal: <a href="https://github.com/pierrickrogermele/uppsala-pierrick-log2trans">https://github.com/pierrickrogermele/uppsala-pierrick-log2trans</a></p>

<p>Once you have gained some experience with writing Dockerfiles – the main way to define a Docker image – you should consider reading up on the best practices to improve your Dockerfiles and, consequently, your Docker images. The official <a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">Docker Best Practices</a> is an excellent resource to read.</p>

<p>In order to make your ‘containerised’ application available in PhenoMenal, you should add your Dockerfile with the required accompanying files (as few as possible, try to fetch files from a github repository instead) to our PhenoMeNal github repository. You can also ask someone who can to fork it to the <a href="https://github.com/phnmnl">PhenoMeNal github repository</a> and register it with the <a href="http://phenomenal-h2020.eu/jenkins/">PhenoMeNal Jenkins Continuous Integration Server</a>. As a result, your docker container image should be available through our <a href="https://container-registry.phenomenal-h2020.eu/">docker registry</a> “automagically”.</p>
